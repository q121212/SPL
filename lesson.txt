*args
globals()
locals()

lambda arg1, argx: expression
map(func, sequence_of_variables_for_func)

filter(labmda var: var_condition, sequence)
or
filter(None, sequence) # return truthly values

zip(itarables_thing1, iterable_thingx)

zip implementation through map:
map(lambda i, j: (i, j), iterable_thing1,iterable_thing2)
or in general case:
map(lambda *args: args, iterable_thing1, iterable_thingx) 

pep8 ./file
autopep8 ./file


func=decorator(func)

or

def decorator(func):
  if not decorator.i:
    decorator.i = 0 
  else:
    decorator.i+= 1
  
  return func

@decorator
def func():
  return 1


any()
all()


a='asdfg'
z=iter(a)
next(z)



import pickle 				# for dump & undumps data structures

class M:
  var = 1
  var2 = 'temp'

data=M()

with open('filename', 'wb', 1000) as file: #  1000 - buffer
  pickle.dump(data, file)				   # dump data to file


with open('filename', 'rb', 1000) as file: #  1000 - buffer
  extracted_data = pickle.load(file)	   # extract data from file

# tell % seek in file
with open('file', 'w') as f:
	f.tell()					# identify current cursor position in the file
	f.seek(10)					# find 10 position in the file
